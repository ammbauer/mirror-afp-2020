<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.isa-afp.org/rss.xml" rel="self" type="application/rss+xml" />
    <title>Archive of Formal Proofs</title>
    <link>https://www.isa-afp.org</link>
    <description>
      The Archive of Formal Proofs is a collection of proof libraries, examples,
      and larger scientific developments, mechanically checked
      in the theorem prover Isabelle.
    </description>
    <pubDate>29 Apr 2018 00:00:00 +0000</pubDate>
    <item>
       <title>WebAssembly</title>
              <link>https://www.isa-afp.org/entries/WebAssembly.html</link>
       <guid>https://www.isa-afp.org/entries/WebAssembly.html</guid>
       <dc:creator> Conrad Watt       </dc:creator>
       <pubDate>29 Apr 2018 00:00:00 +0000</pubDate>
       <description>
This is a mechanised specification of the WebAssembly language, drawn
mainly from the previously published paper formalisation of Haas et
al. Also included is a full proof of soundness of the type system,
together with a verified type checker and interpreter. We include only
a partial procedure for the extraction of the type checker and
interpreter here. For more details, please see our paper in CPP 2018.</description>
    </item>
    <item>
       <title>VerifyThis 2018 - Polished Isabelle Solutions</title>
              <link>https://www.isa-afp.org/entries/VerifyThis2018.html</link>
       <guid>https://www.isa-afp.org/entries/VerifyThis2018.html</guid>
       <dc:creator> Peter Lammich, Simon Wimmer       </dc:creator>
       <pubDate>27 Apr 2018 00:00:00 +0000</pubDate>
       <description>
&lt;a
href=&#34;http://www.pm.inf.ethz.ch/research/verifythis.html&#34;&gt;VerifyThis
2018&lt;/a&gt; was a program verification competition associated with
ETAPS 2018. It was the 7th event in the VerifyThis competition series.
In this entry, we present polished and completed versions of our
solutions that we created during the competition.</description>
    </item>
    <item>
       <title>Bounded Natural Functors with Covariance and Contravariance</title>
              <link>https://www.isa-afp.org/entries/BNF_CC.html</link>
       <guid>https://www.isa-afp.org/entries/BNF_CC.html</guid>
       <dc:creator> Andreas Lochbihler, Joshua Schneider       </dc:creator>
       <pubDate>24 Apr 2018 00:00:00 +0000</pubDate>
       <description>
Bounded natural functors (BNFs) provide a modular framework for the
construction of (co)datatypes in higher-order logic.  Their functorial
operations, the mapper and relator, are restricted to a subset of the
parameters, namely those where recursion can take place.  For certain
applications, such as free theorems, data refinement, quotients, and
generalised rewriting, it is desirable that these operations do not
ignore the other parameters.  In this article, we formalise the
generalisation BNF&lt;sub&gt;CC&lt;/sub&gt; that extends the mapper
and relator to covariant and contravariant parameters.  We show that
&lt;ol&gt; &lt;li&gt; BNF&lt;sub&gt;CC&lt;/sub&gt;s are closed under
functor composition and least and greatest fixpoints,&lt;/li&gt;
&lt;li&gt; subtypes inherit the BNF&lt;sub&gt;CC&lt;/sub&gt; structure
under conditions that generalise those for the BNF case,
and&lt;/li&gt; &lt;li&gt; BNF&lt;sub&gt;CC&lt;/sub&gt;s preserve
quotients under mild conditions.&lt;/li&gt; &lt;/ol&gt; These proofs
are carried out for abstract BNF&lt;sub&gt;CC&lt;/sub&gt;s similar to
the AFP entry BNF Operations.  In addition, we apply the
BNF&lt;sub&gt;CC&lt;/sub&gt; theory to several concrete functors.</description>
    </item>
    <item>
       <title>The Incompatibility of Fishburn-Strategyproofness and Pareto-Efficiency</title>
              <link>https://www.isa-afp.org/entries/Fishburn_Impossibility.html</link>
       <guid>https://www.isa-afp.org/entries/Fishburn_Impossibility.html</guid>
       <dc:creator> Felix Brandt, Manuel Eberl, Christian Saile, Christian Stricker       </dc:creator>
       <pubDate>22 Mar 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This formalisation contains the proof that there is no
anonymous Social Choice Function for at least three agents and
alternatives that fulfils both Pareto-Efficiency and
Fishburn-Strategyproofness. It was derived from a proof of &lt;a
href=&#34;http://dss.in.tum.de/files/brandt-research/stratset.pdf&#34;&gt;Brandt
&lt;em&gt;et al.&lt;/em&gt;&lt;/a&gt;, which relies on an unverified
translation of a fixed finite instance of the original problem to SAT.
This Isabelle proof contains a machine-checked version of both the
statement for exactly three agents and alternatives and the lifting to
the general case.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Weight-Balanced Trees</title>
              <link>https://www.isa-afp.org/entries/Weight_Balanced_Trees.html</link>
       <guid>https://www.isa-afp.org/entries/Weight_Balanced_Trees.html</guid>
       <dc:creator> Tobias Nipkow, Stefan Dirix       </dc:creator>
       <pubDate>13 Mar 2018 00:00:00 +0000</pubDate>
       <description>
This theory provides a verified implementation of weight-balanced
trees following the work of &lt;a
href=&#34;https://doi.org/10.1017/S0956796811000104&#34;&gt;Hirai
and Yamamoto&lt;/a&gt; who proved that all parameters in a certain
range are valid, i.e. guarantee that insertion and deletion preserve
weight-balance. Instead of a general theorem we provide parameterized
proofs of preservation of the invariant that work for many (all?)
valid parameters.</description>
    </item>
    <item>
       <title>A Theory of Architectural Design Patterns</title>
              <link>https://www.isa-afp.org/entries/Architectural_Design_Patterns.html</link>
       <guid>https://www.isa-afp.org/entries/Architectural_Design_Patterns.html</guid>
       <dc:creator> Diego Marmsoler       </dc:creator>
       <pubDate>01 Mar 2018 00:00:00 +0000</pubDate>
       <description>
The following document formalizes and verifies several architectural
design patterns. Each pattern specification is formalized in terms of
a locale where the locale assumptions correspond to the assumptions
which a pattern poses on an architecture. Thus, pattern specifications
may build on top of each other by interpreting the corresponding
locale. A pattern is verified using the framework provided by the AFP
entry Dynamic Architectures. Currently, the document consists of
formalizations of 4 different patterns: the singleton, the publisher
subscriber, the blackboard pattern, and the blockchain pattern.
Thereby, the publisher component of the publisher subscriber pattern
is modeled as an instance of the singleton pattern and the blackboard
pattern is modeled as an instance of the publisher subscriber pattern.
In general, this entry provides the first steps towards an overall
theory of architectural design patterns.</description>
    </item>
    <item>
       <title>Hoare Logics for Time Bounds</title>
              <link>https://www.isa-afp.org/entries/Hoare_Time.html</link>
       <guid>https://www.isa-afp.org/entries/Hoare_Time.html</guid>
       <dc:creator> Maximilian P. L. Haslbeck, Tobias Nipkow       </dc:creator>
       <pubDate>26 Feb 2018 00:00:00 +0000</pubDate>
       <description>
We study three different Hoare logics for reasoning about time bounds
of imperative programs and formalize them in Isabelle/HOL: a classical
Hoare like logic due to Nielson, a logic with potentials due to
Carbonneaux &lt;i&gt;et al.&lt;/i&gt; and a &lt;i&gt;separation
logic&lt;/i&gt; following work by Atkey, Chaguérand and Pottier.
These logics are formally shown to be sound and complete. Verification
condition generators are developed and are shown sound and complete
too.  We also consider variants of the systems where we abstract from
multiplicative constants in the running time bounds, thus supporting a
big-O style of reasoning.  Finally we compare the expressive power of
the three systems.</description>
    </item>
    <item>
       <title>Treaps</title>
              <link>https://www.isa-afp.org/entries/Treaps.html</link>
       <guid>https://www.isa-afp.org/entries/Treaps.html</guid>
       <dc:creator> Max Haslbeck, Manuel Eberl, Tobias Nipkow       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; A Treap is a binary tree whose nodes contain pairs
consisting of some payload and an associated priority. It must have
the search-tree property w.r.t. the payloads and the heap property
w.r.t. the priorities. Treaps are an interesting data structure that
is related to binary search trees (BSTs) in the following way: if one
forgets all the priorities of a treap, the resulting BST is exactly
the same as if one had inserted the elements into an empty BST in
order of ascending priority. This means that a treap behaves like a
BST where we can pretend the elements were inserted in a different
order from the one in which they were actually inserted. &lt;/p&gt;
&lt;p&gt; In particular, by choosing these priorities at random upon
insertion of an element, we can pretend that we inserted the elements
in &lt;em&gt;random order&lt;/em&gt;, so that the shape of the
resulting tree is that of a random BST no matter in what order we
insert the elements. This is the main result of this
formalisation.&lt;/p&gt;</description>
    </item>
    <item>
       <title>A verified factorization algorithm for integer polynomials with polynomial complexity</title>
              <link>https://www.isa-afp.org/entries/LLL_Factorization.html</link>
       <guid>https://www.isa-afp.org/entries/LLL_Factorization.html</guid>
       <dc:creator> Jose Divasón, Sebastiaan Joosten, René Thiemann, Akihisa Yamada       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
Short vectors in lattices and factors of integer polynomials are
related. Each factor of an integer polynomial belongs to a certain
lattice. When factoring polynomials, the condition that we are looking
for an irreducible polynomial means that we must look for a small
element in a lattice, which can be done by a basis reduction
algorithm. In this development we formalize this connection and
thereby one main application of the LLL basis reduction algorithm: an
algorithm to factor square-free integer polynomials which runs in
polynomial time. The work is based on our previous
Berlekamp–Zassenhaus development, where the exponential reconstruction
phase has been replaced by the polynomial-time basis reduction
algorithm. Thanks to this formalization we found a serious flaw in a
textbook.</description>
    </item>
    <item>
       <title>First-Order Terms</title>
              <link>https://www.isa-afp.org/entries/First_Order_Terms.html</link>
       <guid>https://www.isa-afp.org/entries/First_Order_Terms.html</guid>
       <dc:creator> Christian Sternagel, René Thiemann       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
We formalize basic results on first-order terms, including a
first-order unification algorithm, as well as well-foundedness of the
subsumption order. This entry is part of the &lt;i&gt;Isabelle
Formalization of Rewriting&lt;/i&gt; &lt;a
href=&#34;http://cl-informatik.uibk.ac.at/isafor&#34;&gt;IsaFoR&lt;/a&gt;,
where first-order terms are omni-present: the unification algorithm is
used to certify several confluence and termination techniques, like
critical-pair computation and dependency graph approximations; and the
subsumption order is a crucial ingredient for completion.</description>
    </item>
    <item>
       <title>The Error Function</title>
              <link>https://www.isa-afp.org/entries/Error_Function.html</link>
       <guid>https://www.isa-afp.org/entries/Error_Function.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; This entry provides the definitions and basic properties of
the complex and real error function erf and the complementary error
function erfc. Additionally, it gives their full asymptotic
expansions. &lt;/p&gt;</description>
    </item>
    <item>
       <title>A verified LLL algorithm</title>
              <link>https://www.isa-afp.org/entries/LLL_Basis_Reduction.html</link>
       <guid>https://www.isa-afp.org/entries/LLL_Basis_Reduction.html</guid>
       <dc:creator> Jose Divasón, Sebastiaan Joosten, René Thiemann, Akihisa Yamada       </dc:creator>
       <pubDate>02 Feb 2018 00:00:00 +0000</pubDate>
       <description>
The Lenstra-Lenstra-Lovász basis reduction algorithm, also known as
LLL algorithm, is an algorithm to find a basis with short, nearly
orthogonal vectors of an integer lattice. Thereby, it can also be seen
as an approximation to solve the shortest vector problem (SVP), which
is an NP-hard problem, where the approximation quality solely depends
on the dimension of the lattice, but not the lattice itself. The
algorithm also possesses many applications in diverse fields of
computer science, from cryptanalysis to number theory, but it is
specially well-known since it was used to implement the first
polynomial-time algorithm to factor polynomials. In this work we
present the first mechanized soundness proof of the LLL algorithm to
compute short vectors in lattices. The formalization follows a
textbook by von zur Gathen and Gerhard.</description>
    </item>
    <item>
       <title>Formalization of Bachmair and Ganzinger's Ordered Resolution Prover</title>
              <link>https://www.isa-afp.org/entries/Ordered_Resolution_Prover.html</link>
       <guid>https://www.isa-afp.org/entries/Ordered_Resolution_Prover.html</guid>
       <dc:creator> Anders Schlichtkrull, Jasmin Christian Blanchette, Dmitriy Traytel, Uwe Waldmann       </dc:creator>
       <pubDate>18 Jan 2018 00:00:00 +0000</pubDate>
       <description>
This Isabelle/HOL formalization covers Sections 2 to 4 of Bachmair and
Ganzinger&#39;s &#34;Resolution Theorem Proving&#34; chapter in the
&lt;em&gt;Handbook of Automated Reasoning&lt;/em&gt;. This includes
soundness and completeness of unordered and ordered variants of ground
resolution with and without literal selection, the standard redundancy
criterion, a general framework for refutational theorem proving, and
soundness and completeness of an abstract first-order prover.</description>
    </item>
    <item>
       <title>An Isabelle/HOL formalisation of Green's Theorem</title>
              <link>https://www.isa-afp.org/entries/Green.html</link>
       <guid>https://www.isa-afp.org/entries/Green.html</guid>
       <dc:creator> Mohammad Abdulaziz, Lawrence C. Paulson       </dc:creator>
       <pubDate>11 Jan 2018 00:00:00 +0000</pubDate>
       <description>
We formalise a statement of Green’s theorem—the first formalisation to
our knowledge—in Isabelle/HOL. The theorem statement that we formalise
is enough for most applications, especially in physics and
engineering. Our formalisation is made possible by a novel proof that
avoids the ubiquitous line integral cancellation argument. This
eliminates the need to formalise orientations and region boundaries
explicitly with respect to the outwards-pointing normal vector.
Instead we appeal to a homological argument about equivalences between
paths.</description>
    </item>
    <item>
       <title>Taylor Models</title>
              <link>https://www.isa-afp.org/entries/Taylor_Models.html</link>
       <guid>https://www.isa-afp.org/entries/Taylor_Models.html</guid>
       <dc:creator> Christoph Traut, Fabian Immler       </dc:creator>
       <pubDate>08 Jan 2018 00:00:00 +0000</pubDate>
       <description>
We present a formally verified implementation of multivariate Taylor
models. Taylor models are a form of rigorous polynomial approximation,
consisting of an approximation polynomial based on Taylor expansions,
combined with a rigorous bound on the approximation error. Taylor
models were introduced as a tool to mitigate the dependency problem of
interval arithmetic. Our implementation automatically computes Taylor
models for the class of elementary functions, expressed by composition
of arithmetic operations and basic functions like exp, sin, or square
root.</description>
    </item>
    <item>
       <title>The Falling Factorial of a Sum</title>
              <link>https://www.isa-afp.org/entries/Falling_Factorial_Sum.html</link>
       <guid>https://www.isa-afp.org/entries/Falling_Factorial_Sum.html</guid>
       <dc:creator> Lukas Bulwahn       </dc:creator>
       <pubDate>22 Dec 2017 00:00:00 +0000</pubDate>
       <description>
This entry shows that the falling factorial of a sum can be computed
with an expression using binomial coefficients and the falling
factorial of its summands. The entry provides three different proofs:
a combinatorial proof, an induction proof and an algebraic proof using
the Vandermonde identity.  The three formalizations try to follow
their informal presentations from a Mathematics Stack Exchange page as
close as possible. The induction and algebraic formalization end up to
be very close to their informal presentation, whereas the
combinatorial proof first requires the introduction of list
interleavings, and significant more detail than its informal
presentation.</description>
    </item>
    <item>
       <title>The Median-of-Medians Selection Algorithm</title>
              <link>https://www.isa-afp.org/entries/Median_Of_Medians_Selection.html</link>
       <guid>https://www.isa-afp.org/entries/Median_Of_Medians_Selection.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>21 Dec 2017 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This entry provides an executable functional implementation
of the Median-of-Medians algorithm for selecting the
&lt;em&gt;k&lt;/em&gt;-th smallest element of an unsorted list
deterministically in linear time. The size bounds for the recursive
call that lead to the linear upper bound on the run-time of the
algorithm are also proven. &lt;/p&gt;</description>
    </item>
    <item>
       <title>The Mason–Stother's Theorem</title>
              <link>https://www.isa-afp.org/entries/Mason_Stothers.html</link>
       <guid>https://www.isa-afp.org/entries/Mason_Stothers.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>21 Dec 2017 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This article provides a formalisation of Snyder’s simple and
elegant proof of the Mason&amp;ndash;Stothers theorem, which is the
polynomial analogue of the famous abc Conjecture for integers.
Remarkably, Snyder found this very elegant proof when he was still a
high-school student.&lt;/p&gt; &lt;p&gt;In short, the statement of the
theorem is that three non-zero coprime polynomials
&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;
over a field which sum to 0 and do not all have vanishing derivatives
fulfil max{deg(&lt;em&gt;A&lt;/em&gt;), deg(&lt;em&gt;B&lt;/em&gt;),
deg(&lt;em&gt;C&lt;/em&gt;)} &lt; deg(rad(&lt;em&gt;ABC&lt;/em&gt;))
where the rad(&lt;em&gt;P&lt;/em&gt;) denotes the
&lt;em&gt;radical&lt;/em&gt; of &lt;em&gt;P&lt;/em&gt;,
i.&amp;thinsp;e. the product of all unique irreducible factors of
&lt;em&gt;P&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;This theorem also implies a
kind of polynomial analogue of Fermat’s Last Theorem for polynomials:
except for trivial cases,
&lt;em&gt;A&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; +
&lt;em&gt;B&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; +
&lt;em&gt;C&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; = 0 implies
n&amp;nbsp;&amp;le;&amp;nbsp;2 for coprime polynomials
&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;
over a field.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
       <title>The string search algorithm by Knuth, Morris and Pratt</title>
              <link>https://www.isa-afp.org/entries/Knuth_Morris_Pratt.html</link>
       <guid>https://www.isa-afp.org/entries/Knuth_Morris_Pratt.html</guid>
       <dc:creator> Fabian Hellauer, Peter Lammich       </dc:creator>
       <pubDate>18 Dec 2017 00:00:00 +0000</pubDate>
       <description>
The Knuth-Morris-Pratt algorithm is often used to show that the
problem of finding a string &lt;i&gt;s&lt;/i&gt; in a text
&lt;i&gt;t&lt;/i&gt; can be solved deterministically in
&lt;i&gt;O(|s| + |t|)&lt;/i&gt; time. We use the Isabelle
Refinement Framework to formulate and verify the algorithm. Via
refinement, we apply some optimisations and finally use the
&lt;em&gt;Sepref&lt;/em&gt; tool to obtain executable code in
&lt;em&gt;Imperative/HOL&lt;/em&gt;.</description>
    </item>
    <item>
       <title>Stochastic Matrices and the Perron-Frobenius Theorem</title>
              <link>https://www.isa-afp.org/entries/Stochastic_Matrices.html</link>
       <guid>https://www.isa-afp.org/entries/Stochastic_Matrices.html</guid>
       <dc:creator> René Thiemann       </dc:creator>
       <pubDate>22 Nov 2017 00:00:00 +0000</pubDate>
       <description>
Stochastic matrices are a convenient way to model discrete-time and
finite state Markov chains. The Perron&amp;ndash;Frobenius theorem
tells us something about the existence and uniqueness of non-negative
eigenvectors of a stochastic matrix.  In this entry, we formalize
stochastic matrices, link the formalization to the existing AFP-entry
on Markov chains, and apply the Perron&amp;ndash;Frobenius theorem to
prove that stationary distributions always exist, and they are unique
if the stochastic matrix is irreducible.</description>
    </item>
    <item>
       <title>The IMAP CmRDT</title>
              <link>https://www.isa-afp.org/entries/IMAP-CRDT.html</link>
       <guid>https://www.isa-afp.org/entries/IMAP-CRDT.html</guid>
       <dc:creator> Tim Jungnickel, Lennart Oldenburg, Matthias Loibl       </dc:creator>
       <pubDate>09 Nov 2017 00:00:00 +0000</pubDate>
       <description>
We provide our Isabelle/HOL formalization of a Conflict-free
Replicated Datatype for Internet Message Access Protocol commands.
We show that Strong Eventual Consistency (SEC) is guaranteed
by proving the commutativity of concurrent operations. We base our
formalization on the recently proposed &#34;framework for
establishing Strong Eventual Consistency for Conflict-free Replicated
Datatypes&#34; (AFP.CRDT) from Gomes et al. Hence, we provide an
additional example of how the recently proposed framework can be used
to design and prove CRDTs.</description>
    </item>
    <item>
       <title>Hybrid Multi-Lane Spatial Logic</title>
              <link>https://www.isa-afp.org/entries/Hybrid_Multi_Lane_Spatial_Logic.html</link>
       <guid>https://www.isa-afp.org/entries/Hybrid_Multi_Lane_Spatial_Logic.html</guid>
       <dc:creator> Sven Linker       </dc:creator>
       <pubDate>06 Nov 2017 00:00:00 +0000</pubDate>
       <description>
We present a semantic embedding of a spatio-temporal multi-modal
logic, specifically defined to reason about motorway traffic, into
Isabelle/HOL. The semantic model is an abstraction of a motorway,
emphasising local spatial properties, and parameterised by the types
of sensors deployed in the vehicles. We use the logic to define
controller constraints to ensure safety, i.e., the absence of
collisions on the motorway. After proving safety with a restrictive
definition of sensors, we relax these assumptions and show how to
amend the controller constraints to still guarantee safety.</description>
    </item>
    <item>
       <title>The Kuratowski Closure-Complement Theorem</title>
              <link>https://www.isa-afp.org/entries/Kuratowski_Closure_Complement.html</link>
       <guid>https://www.isa-afp.org/entries/Kuratowski_Closure_Complement.html</guid>
       <dc:creator> Peter Gammie, Gianpaolo Gioiosa       </dc:creator>
       <pubDate>26 Oct 2017 00:00:00 +0000</pubDate>
       <description>
We discuss a topological curiosity discovered by Kuratowski (1922):
the fact that the number of distinct operators on a topological space
generated by compositions of closure and complement never exceeds 14,
and is exactly 14 in the case of R. In addition, we prove a theorem
due to Chagrov (1982) that classifies topological spaces according to
the number of such operators they support.</description>
    </item>
    <item>
       <title>Transition Systems and Automata</title>
              <link>https://www.isa-afp.org/entries/Transition_Systems_and_Automata.html</link>
       <guid>https://www.isa-afp.org/entries/Transition_Systems_and_Automata.html</guid>
       <dc:creator> Julian Brunner       </dc:creator>
       <pubDate>19 Oct 2017 00:00:00 +0000</pubDate>
       <description>
This entry provides a very abstract theory of transition systems that
can be instantiated to express various types of automata. A transition
system is typically instantiated by providing a set of initial states,
a predicate for enabled transitions, and a transition execution
function. From this, it defines the concepts of finite and infinite
paths as well as the set of reachable states, among other things. Many
useful theorems, from basic path manipulation rules to coinduction and
run construction rules, are proven in this abstract transition system
context. The library comes with instantiations for DFAs, NFAs, and
Büchi automata.</description>
    </item>
    <item>
       <title>Büchi Complementation</title>
              <link>https://www.isa-afp.org/entries/Buchi_Complementation.html</link>
       <guid>https://www.isa-afp.org/entries/Buchi_Complementation.html</guid>
       <dc:creator> Julian Brunner       </dc:creator>
       <pubDate>19 Oct 2017 00:00:00 +0000</pubDate>
       <description>
This entry provides a verified implementation of rank-based Büchi
Complementation. The verification is done in three steps: &lt;ol&gt;
&lt;li&gt;Definition of odd rankings and proof that an automaton
rejects a word iff there exists an odd ranking for it.&lt;/li&gt;
&lt;li&gt;Definition of the complement automaton and proof that it
accepts exactly those words for which there is an odd
ranking.&lt;/li&gt; &lt;li&gt;Verified implementation of the
complement automaton using the Isabelle Collections
Framework.&lt;/li&gt; &lt;/ol&gt;</description>
    </item>
    <item>
       <title>Evaluate winding numbers through Cauchy indices</title>
              <link>https://www.isa-afp.org/entries/Winding_Number_Eval.html</link>
       <guid>https://www.isa-afp.org/entries/Winding_Number_Eval.html</guid>
       <dc:creator> Wenda Li       </dc:creator>
       <pubDate>17 Oct 2017 00:00:00 +0000</pubDate>
       <description>
In complex analysis, the winding number measures the number of times a
path (counterclockwise) winds around a point, while the Cauchy index
can approximate how the path winds. This entry provides a
formalisation of the Cauchy index, which is then shown to be related
to the winding number. In addition, this entry also offers a tactic
that enables users to evaluate the winding number by calculating
Cauchy indices.</description>
    </item>
    <item>
       <title>Count the Number of Complex Roots</title>
              <link>https://www.isa-afp.org/entries/Count_Complex_Roots.html</link>
       <guid>https://www.isa-afp.org/entries/Count_Complex_Roots.html</guid>
       <dc:creator> Wenda Li       </dc:creator>
       <pubDate>17 Oct 2017 00:00:00 +0000</pubDate>
       <description>
Based on evaluating Cauchy indices through remainder sequences, this
entry provides an effective procedure to count the number of complex
roots (with multiplicity) of a polynomial within a rectangle box or a
half-plane. Potential applications of this entry include certified
complex root isolation (of a polynomial) and testing the Routh-Hurwitz
stability criterion (i.e., to check whether all the roots of some
characteristic polynomial have negative real parts).</description>
    </item>
    <item>
       <title>Homogeneous Linear Diophantine Equations</title>
              <link>https://www.isa-afp.org/entries/Diophantine_Eqns_Lin_Hom.html</link>
       <guid>https://www.isa-afp.org/entries/Diophantine_Eqns_Lin_Hom.html</guid>
       <dc:creator> Florian Messner, Julian Parsert, Jonas Schöpf, Christian Sternagel       </dc:creator>
       <pubDate>14 Oct 2017 00:00:00 +0000</pubDate>
       <description>
We formalize the theory of homogeneous linear diophantine equations,
focusing on two main results: (1) an abstract characterization of
minimal complete sets of solutions, and (2) an algorithm computing
them. Both, the characterization and the algorithm are based on
previous work by Huet. Our starting point is a simple but inefficient
variant of Huet&#39;s lexicographic algorithm incorporating improved
bounds due to Clausen and Fortenbacher. We proceed by proving its
soundness and completeness. Finally, we employ code equations to
obtain a reasonably efficient implementation. Thus, we provide a
formally verified solver for homogeneous linear diophantine equations.</description>
    </item>
    <item>
       <title>The Hurwitz and Riemann ζ Functions</title>
              <link>https://www.isa-afp.org/entries/Zeta_Function.html</link>
       <guid>https://www.isa-afp.org/entries/Zeta_Function.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>12 Oct 2017 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; This entry builds upon the results about formal and analytic
Dirichlet series to define the Hurwitz &amp;zeta; function and, based
on that, the Riemann &amp;zeta; function. This is done by first
defining them for &amp;real;(&lt;i&gt;z&lt;/i&gt;) &gt; 1 and then
successively extending the domain to the left using the
Euler&amp;ndash;MacLaurin formula. &lt;/p&gt; &lt;p&gt; Some basic
results about these functions are also shown, such as their
analyticity on &amp;#8450;&amp;#8726;&amp;#123;1&amp;#125;, that they
have a simple pole with residue 1 at 1, their relation to the
&amp;Gamma; function, and the special values at negative integers and
positive even integers &amp;ndash; including the famous &amp;zeta;(-1)
= -1/12 and &amp;zeta;(2) = &amp;pi;&amp;sup2;/6. &lt;/p&gt; &lt;p&gt;
Lastly, the entry also contains Euler&#39;s analytic proof of the
infinitude of primes, based on the fact that
&amp;zeta;(&lt;i&gt;s&lt;/i&gt;) has a pole at &lt;i&gt;s&lt;/i&gt; =
1. &lt;/p&gt;</description>
    </item>
    <item>
       <title>Linear Recurrences</title>
              <link>https://www.isa-afp.org/entries/Linear_Recurrences.html</link>
       <guid>https://www.isa-afp.org/entries/Linear_Recurrences.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>12 Oct 2017 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; Linear recurrences with constant coefficients are an
interesting class of recurrence equations that can be solved
explicitly. The most famous example are certainly the Fibonacci
numbers with the equation &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;n&lt;/i&gt;) =
&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;n&lt;/i&gt;-1) +
&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;n&lt;/i&gt; - 2) and the quite
non-obvious closed form
(&lt;i&gt;&amp;phi;&lt;/i&gt;&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;
-
(-&lt;i&gt;&amp;phi;&lt;/i&gt;)&lt;sup&gt;-&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;)
/ &amp;radic;&lt;span style=&#34;text-decoration:
overline&#34;&gt;5&lt;/span&gt; where &amp;phi; is the golden ratio.
&lt;/p&gt; &lt;p&gt; In this work, I build on existing tools in
Isabelle &amp;ndash; such as formal power series and polynomial
factorisation algorithms &amp;ndash; to develop a theory of these
recurrences and derive a fully executable solver for them that can be
exported to programming languages like Haskell. &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
