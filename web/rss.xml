<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.isa-afp.org/rss.xml" rel="self" type="application/rss+xml" />
    <title>Archive of Formal Proofs</title>
    <link>https://www.isa-afp.org</link>
    <description>
      The Archive of Formal Proofs is a collection of proof libraries, examples,
      and larger scientific developments, mechanically checked
      in the theorem prover Isabelle.
    </description>
    <pubDate>21 Feb 2019 00:00:00 +0000</pubDate>
    <item>
       <title>Elementary Facts About the Distribution of Primes</title>
              <link>https://www.isa-afp.org/entries/Prime_Distribution_Elementary.html</link>
       <guid>https://www.isa-afp.org/entries/Prime_Distribution_Elementary.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>21 Feb 2019 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This entry is a formalisation of Chapter 4 (and parts of
Chapter 3) of Apostol&#39;s &lt;a
href=&#34;https://www.springer.com/de/book/9780387901633&#34;&gt;&lt;em&gt;Introduction
to Analytic Number Theory&lt;/em&gt;&lt;/a&gt;. The main topics that
are addressed are properties of the distribution of prime numbers that
can be shown in an elementary way (i.&amp;thinsp;e. without the Prime
Number Theorem), the various equivalent forms of the PNT (which imply
each other in elementary ways), and consequences that follow from the
PNT in elementary ways. The latter include, most notably, asymptotic
bounds for the number of distinct prime factors of
&lt;em&gt;n&lt;/em&gt;, the divisor function
&lt;em&gt;d(n)&lt;/em&gt;, Euler&#39;s totient function
&lt;em&gt;&amp;phi;(n)&lt;/em&gt;, and
lcm(1,&amp;hellip;,&lt;em&gt;n&lt;/em&gt;).&lt;/p&gt;</description>
    </item>
    <item>
       <title>Kruskal's Algorithm for Minimum Spanning Forest</title>
              <link>https://www.isa-afp.org/entries/Kruskal.html</link>
       <guid>https://www.isa-afp.org/entries/Kruskal.html</guid>
       <dc:creator> Maximilian P.L. Haslbeck, Peter Lammich, Julian Biendarra       </dc:creator>
       <pubDate>14 Feb 2019 00:00:00 +0000</pubDate>
       <description>
This Isabelle/HOL formalization defines a greedy algorithm for finding
a minimum weight basis on a weighted matroid and proves its
correctness. This algorithm is an abstract version of Kruskal&#39;s
algorithm.  We interpret the abstract algorithm for the cycle matroid
(i.e. forests in a graph) and refine it to imperative executable code
using an efficient union-find data structure.  Our formalization can
be instantiated for different graph representations. We provide
instantiations for undirected graphs and symmetric directed graphs.</description>
    </item>
    <item>
       <title>Probabilistic Primality Testing</title>
              <link>https://www.isa-afp.org/entries/Probabilistic_Prime_Tests.html</link>
       <guid>https://www.isa-afp.org/entries/Probabilistic_Prime_Tests.html</guid>
       <dc:creator> Daniel Stüwe, Manuel Eberl       </dc:creator>
       <pubDate>11 Feb 2019 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;The most efficient known primality tests are
&lt;em&gt;probabilistic&lt;/em&gt; in the sense that they use
randomness and may, with some probability, mistakenly classify a
composite number as prime &amp;ndash; but never a prime number as
composite. Examples of this are the Miller&amp;ndash;Rabin test, the
Solovay&amp;ndash;Strassen test, and (in most cases) Fermat&#39;s
test.&lt;/p&gt; &lt;p&gt;This entry defines these three tests and
proves their correctness. It also develops some of the
number-theoretic foundations, such as Carmichael numbers and the
Jacobi symbol with an efficient executable algorithm to compute
it.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Universal Turing Machine</title>
              <link>https://www.isa-afp.org/entries/Universal_Turing_Machine.html</link>
       <guid>https://www.isa-afp.org/entries/Universal_Turing_Machine.html</guid>
       <dc:creator> Jian Xu, Xingyuan Zhang, Christian Urban, Sebastiaan J. C. Joosten       </dc:creator>
       <pubDate>08 Feb 2019 00:00:00 +0000</pubDate>
       <description>
We formalise results from computability theory: recursive functions,
undecidability of the halting problem, and the existence of a
universal Turing machine. This formalisation is the AFP entry
corresponding to the paper Mechanising Turing Machines and Computability Theory
in Isabelle/HOL, ITP 2013.</description>
    </item>
    <item>
       <title>Isabelle/UTP: Mechanised Theory Engineering for Unifying Theories of Programming</title>
              <link>https://www.isa-afp.org/entries/UTP.html</link>
       <guid>https://www.isa-afp.org/entries/UTP.html</guid>
       <dc:creator> Simon Foster, Frank Zeyda, Yakoub Nemouchi, Pedro Ribeiro, Burkhart Wolff       </dc:creator>
       <pubDate>01 Feb 2019 00:00:00 +0000</pubDate>
       <description>
Isabelle/UTP is a mechanised theory engineering toolkit based on Hoare
and He’s Unifying Theories of Programming (UTP). UTP enables the
creation of denotational, algebraic, and operational semantics for
different programming languages using an alphabetised relational
calculus. We provide a semantic embedding of the alphabetised
relational calculus in Isabelle/HOL, including new type definitions,
relational constructors, automated proof tactics, and accompanying
algebraic laws. Isabelle/UTP can be used to both capture laws of
programming for different languages, and put these fundamental
theorems to work in the creation of associated verification tools,
using calculi like Hoare logics. This document describes the
relational core of the UTP in Isabelle/HOL.</description>
    </item>
    <item>
       <title>The Inversions of a List</title>
              <link>https://www.isa-afp.org/entries/List_Inversions.html</link>
       <guid>https://www.isa-afp.org/entries/List_Inversions.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>01 Feb 2019 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This entry defines the set of &lt;em&gt;inversions&lt;/em&gt;
of a list, i.e. the pairs of indices that violate sortedness. It also
proves the correctness of the well-known
&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n log n&lt;/em&gt;)
divide-and-conquer algorithm to compute the number of
inversions.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Farkas' Lemma and Motzkin's Transposition Theorem</title>
              <link>https://www.isa-afp.org/entries/Farkas.html</link>
       <guid>https://www.isa-afp.org/entries/Farkas.html</guid>
       <dc:creator> Ralph Bottesch, Max W. Haslbeck, René Thiemann       </dc:creator>
       <pubDate>17 Jan 2019 00:00:00 +0000</pubDate>
       <description>
We formalize a proof of Motzkin&#39;s transposition theorem and
Farkas&#39; lemma in Isabelle/HOL. Our proof is based on the
formalization of the simplex algorithm which, given a set of linear
constraints, either returns a satisfying assignment to the problem or
detects unsatisfiability. By reusing facts about the simplex algorithm
we show that a set of linear constraints is unsatisfiable if and only
if there is a linear combination of the constraints which evaluates to
a trivially unsatisfiable inequality.</description>
    </item>
    <item>
       <title>IMP2 – Simple Program Verification in Isabelle/HOL</title>
              <link>https://www.isa-afp.org/entries/IMP2.html</link>
       <guid>https://www.isa-afp.org/entries/IMP2.html</guid>
       <dc:creator> Peter Lammich, Simon Wimmer       </dc:creator>
       <pubDate>15 Jan 2019 00:00:00 +0000</pubDate>
       <description>
IMP2 is a simple imperative language together with Isabelle tooling to
create a program verification environment in Isabelle/HOL. The tools
include a C-like syntax, a verification condition generator, and
Isabelle commands for the specification of programs. The framework is
modular, i.e., it allows easy reuse of already proved programs within
larger programs.  This entry comes with a quickstart guide and a large
collection of examples, spanning basic algorithms with simple proofs
to more advanced algorithms and proof techniques like data refinement.
Some highlights from the examples are: &lt;ul&gt; &lt;li&gt;Bisection
Square Root, &lt;/li&gt; &lt;li&gt;Extended Euclid,  &lt;/li&gt;
&lt;li&gt;Exponentiation by Squaring,  &lt;/li&gt; &lt;li&gt;Binary
Search,  &lt;/li&gt; &lt;li&gt;Insertion Sort,  &lt;/li&gt;
&lt;li&gt;Quicksort,  &lt;/li&gt; &lt;li&gt;Depth First Search.
&lt;/li&gt; &lt;/ul&gt;  The abstract syntax and semantics are very
simple and well-documented. They are suitable to be used in a course,
as extension to the IMP language which comes with the Isabelle
distribution.  While this entry is limited to a simple imperative
language, the ideas could be extended to more sophisticated languages.</description>
    </item>
    <item>
       <title>An Algebra for Higher-Order Terms</title>
              <link>https://www.isa-afp.org/entries/Higher_Order_Terms.html</link>
       <guid>https://www.isa-afp.org/entries/Higher_Order_Terms.html</guid>
       <dc:creator> Lars Hupel       </dc:creator>
       <pubDate>15 Jan 2019 00:00:00 +0000</pubDate>
       <description>
In this formalization, I introduce a higher-order term algebra,
generalizing the notions of free variables, matching, and
substitution. The need arose from the work on a &lt;a
href=&#34;http://dx.doi.org/10.1007/978-3-319-89884-1_35&#34;&gt;verified
compiler from Isabelle to CakeML&lt;/a&gt;. Terms can be thought of as
consisting of a generic (free variables, constants, ap- plication) and
a specific part. As example applications, this entry provides
instantiations for de-Bruijn terms, terms with named variables, and
&lt;a
href=&#34;https://www.isa-afp.org/entries/Lambda_Free_RPOs.html&#34;&gt;Blanchette’s
&amp;lambda;-free higher-order terms&lt;/a&gt;. Furthermore, I
implement translation functions between de-Bruijn terms and named
terms and prove their correctness.</description>
    </item>
    <item>
       <title>A Reduction Theorem for Store Buffers</title>
              <link>https://www.isa-afp.org/entries/Store_Buffer_Reduction.html</link>
       <guid>https://www.isa-afp.org/entries/Store_Buffer_Reduction.html</guid>
       <dc:creator> Ernie Cohen, Norbert Schirmer       </dc:creator>
       <pubDate>07 Jan 2019 00:00:00 +0000</pubDate>
       <description>
When verifying a concurrent program, it is usual to assume that memory
is sequentially consistent.  However, most modern multiprocessors
depend on store buffering for efficiency, and provide native
sequential consistency only at a substantial performance penalty.  To
regain sequential consistency, a programmer has to follow an
appropriate programming discipline. However, na\&#34;ive disciplines,
such as protecting all shared accesses with locks, are not flexible
enough for building high-performance multiprocessor software.  We
present a new discipline for concurrent programming under TSO (total
store order, with store buffer forwarding). It does not depend on
concurrency primitives, such as locks. Instead, threads use ghost
operations to acquire and release ownership of memory addresses. A
thread can write to an address only if no other thread owns it, and
can read from an address only if it owns it or it is shared and the
thread has flushed its store buffer since it last wrote to an address
it did not own. This discipline covers both coarse-grained concurrency
(where data is protected by locks) as well as fine-grained concurrency
(where atomic operations race to memory).  We formalize this
discipline in Isabelle/HOL, and prove that if every execution of a
program in a system without store buffers follows the discipline, then
every execution of the program with store buffers is sequentially
consistent. Thus, we can show sequential consistency under TSO by
ordinary assertional reasoning about the program, without having to
consider store buffers at all.</description>
    </item>
    <item>
       <title>A Formal Model of the Document Object Model</title>
              <link>https://www.isa-afp.org/entries/Core_DOM.html</link>
       <guid>https://www.isa-afp.org/entries/Core_DOM.html</guid>
       <dc:creator> Achim D. Brucker, Michael Herzberg       </dc:creator>
       <pubDate>26 Dec 2018 00:00:00 +0000</pubDate>
       <description>
In this AFP entry, we formalize the core of the Document Object Model
(DOM).  At its core, the DOM defines a tree-like data structure for
representing documents in general and HTML documents in particular. It
is the heart of any modern web browser.  Formalizing the key concepts
of the DOM is a prerequisite for the formal reasoning over client-side
JavaScript programs and for the analysis of security concepts in
modern web browsers.  We present a formalization of the core DOM, with
focus on the node-tree and the operations defined on node-trees, in
Isabelle/HOL. We use the formalization to verify the functional
correctness of the most important functions defined in the DOM
standard. Moreover, our formalization is 1) extensible, i.e., can be
extended without the need of re-proving already proven properties and
2) executable, i.e., we can generate executable code from our
specification.</description>
    </item>
    <item>
       <title>Formalization of Concurrent Revisions</title>
              <link>https://www.isa-afp.org/entries/Concurrent_Revisions.html</link>
       <guid>https://www.isa-afp.org/entries/Concurrent_Revisions.html</guid>
       <dc:creator> Roy Overbeek       </dc:creator>
       <pubDate>25 Dec 2018 00:00:00 +0000</pubDate>
       <description>
Concurrent revisions is a concurrency control model developed by
Microsoft Research. It has many interesting properties that
distinguish it from other well-known models such as transactional
memory. One of these properties is &lt;em&gt;determinacy&lt;/em&gt;:
programs written within the model always produce the same outcome,
independent of scheduling activity. The concurrent revisions model has
an operational semantics, with an informal proof of determinacy. This
document contains an Isabelle/HOL formalization of this semantics and
the proof of determinacy.</description>
    </item>
    <item>
       <title>Verifying Imperative Programs using Auto2</title>
              <link>https://www.isa-afp.org/entries/Auto2_Imperative_HOL.html</link>
       <guid>https://www.isa-afp.org/entries/Auto2_Imperative_HOL.html</guid>
       <dc:creator> Bohua Zhan       </dc:creator>
       <pubDate>21 Dec 2018 00:00:00 +0000</pubDate>
       <description>
This entry contains the application of auto2 to verifying functional
and imperative programs. Algorithms and data structures that are
verified include linked lists, binary search trees, red-black trees,
interval trees, priority queue, quicksort, union-find, Dijkstra&#39;s
algorithm, and a sweep-line algorithm for detecting rectangle
intersection. The imperative verification is based on Imperative HOL
and its separation logic framework. A major goal of this work is to
set up automation in order to reduce the length of proof that the user
needs to provide, both for verifying functional programs and for
working with separation logic.</description>
    </item>
    <item>
       <title>Constructive Cryptography in HOL</title>
              <link>https://www.isa-afp.org/entries/Constructive_Cryptography.html</link>
       <guid>https://www.isa-afp.org/entries/Constructive_Cryptography.html</guid>
       <dc:creator> Andreas Lochbihler, S. Reza Sefidgar       </dc:creator>
       <pubDate>17 Dec 2018 00:00:00 +0000</pubDate>
       <description>
Inspired by Abstract Cryptography, we extend CryptHOL, a framework for
formalizing game-based proofs, with an abstract model of Random
Systems and provide proof rules about their composition and equality.
This foundation facilitates the formalization of Constructive
Cryptography proofs, where the security of a cryptographic scheme is
realized as a special form of construction in which a complex random
system is built from simpler ones. This is a first step towards a
fully-featured compositional framework, similar to Universal
Composability framework, that supports formalization of
simulation-based proofs.</description>
    </item>
    <item>
       <title>Transformer Semantics</title>
              <link>https://www.isa-afp.org/entries/Transformer_Semantics.html</link>
       <guid>https://www.isa-afp.org/entries/Transformer_Semantics.html</guid>
       <dc:creator> Georg Struth       </dc:creator>
       <pubDate>11 Dec 2018 00:00:00 +0000</pubDate>
       <description>
These mathematical components formalise predicate transformer
semantics for programs, yet currently only for partial correctness and
in the absence of faults.  A first part for isotone (or monotone),
Sup-preserving and Inf-preserving transformers follows Back and von
Wright&#39;s approach, with additional emphasis on the quantalic
structure of algebras of transformers.  The second part develops
Sup-preserving and Inf-preserving predicate transformers from the
powerset monad, via its Kleisli category and Eilenberg-Moore algebras,
with emphasis on adjunctions and dualities, as well as isomorphisms
between relations, state transformers and predicate transformers.</description>
    </item>
    <item>
       <title>Quantales</title>
              <link>https://www.isa-afp.org/entries/Quantales.html</link>
       <guid>https://www.isa-afp.org/entries/Quantales.html</guid>
       <dc:creator> Georg Struth       </dc:creator>
       <pubDate>11 Dec 2018 00:00:00 +0000</pubDate>
       <description>
These mathematical components formalise basic properties of quantales,
together with some important models, constructions, and concepts,
including quantic nuclei and conuclei.</description>
    </item>
    <item>
       <title>Properties of Orderings and Lattices</title>
              <link>https://www.isa-afp.org/entries/Order_Lattice_Props.html</link>
       <guid>https://www.isa-afp.org/entries/Order_Lattice_Props.html</guid>
       <dc:creator> Georg Struth       </dc:creator>
       <pubDate>11 Dec 2018 00:00:00 +0000</pubDate>
       <description>
These components add further fundamental order and lattice-theoretic
concepts and properties to Isabelle&#39;s libraries.  They follow by
and large the introductory sections of the Compendium of Continuous
Lattices,  covering directed and filtered sets, down-closed and
up-closed sets, ideals and filters, Galois connections, closure and
co-closure operators. Some emphasis is on duality and morphisms
between structures, as in the Compendium.  To this end, three ad-hoc
approaches to duality are compared.</description>
    </item>
    <item>
       <title>Graph Saturation</title>
              <link>https://www.isa-afp.org/entries/Graph_Saturation.html</link>
       <guid>https://www.isa-afp.org/entries/Graph_Saturation.html</guid>
       <dc:creator> Sebastiaan J. C. Joosten       </dc:creator>
       <pubDate>23 Nov 2018 00:00:00 +0000</pubDate>
       <description>
This is an Isabelle/HOL formalisation of graph saturation, closely
following a &lt;a href=&#34;https://doi.org/10.1016/j.jlamp.2018.06.005&#34;&gt;paper by the author&lt;/a&gt; on graph saturation.
Nine out of ten lemmas of the original paper are proven in this
formalisation. The formalisation additionally includes two theorems
that show the main premise of the paper: that consistency and
entailment are decided through graph saturation. This formalisation
does not give executable code, and it did not implement any of the
optimisations suggested in the paper.</description>
    </item>
    <item>
       <title>A Verified Functional Implementation of Bachmair and Ganzinger's Ordered Resolution Prover</title>
              <link>https://www.isa-afp.org/entries/Functional_Ordered_Resolution_Prover.html</link>
       <guid>https://www.isa-afp.org/entries/Functional_Ordered_Resolution_Prover.html</guid>
       <dc:creator> Anders Schlichtkrull, Jasmin Christian Blanchette, Dmitriy Traytel       </dc:creator>
       <pubDate>23 Nov 2018 00:00:00 +0000</pubDate>
       <description>
This Isabelle/HOL formalization refines the abstract ordered
resolution prover  presented in Section 4.3 of Bachmair and
Ganzinger&#39;s &#34;Resolution Theorem Proving&#34; chapter in the
&lt;i&gt;Handbook of Automated Reasoning&lt;/i&gt;. The result is a
functional implementation of a first-order prover.</description>
    </item>
    <item>
       <title>Auto2 Prover</title>
              <link>https://www.isa-afp.org/entries/Auto2_HOL.html</link>
       <guid>https://www.isa-afp.org/entries/Auto2_HOL.html</guid>
       <dc:creator> Bohua Zhan       </dc:creator>
       <pubDate>20 Nov 2018 00:00:00 +0000</pubDate>
       <description>
Auto2 is a saturation-based heuristic prover for higher-order logic,
implemented as a tactic in Isabelle.  This entry contains the
instantiation of auto2 for Isabelle/HOL, along with two basic
examples: solutions to some of the Pelletier’s problems, and
elementary number theory of primes.</description>
    </item>
    <item>
       <title>Matroids</title>
              <link>https://www.isa-afp.org/entries/Matroids.html</link>
       <guid>https://www.isa-afp.org/entries/Matroids.html</guid>
       <dc:creator> Jonas Keinholz       </dc:creator>
       <pubDate>16 Nov 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This article defines the combinatorial structures known as
&lt;em&gt;Independence Systems&lt;/em&gt; and
&lt;em&gt;Matroids&lt;/em&gt; and provides basic concepts and theorems
related to them. These structures play an important role in
combinatorial optimisation, e. g. greedy algorithms such as
Kruskal&#39;s algorithm. The development is based on Oxley&#39;s
&lt;a href=&#34;http://www.math.lsu.edu/~oxley/survey4.pdf&#34;&gt;`What
is a Matroid?&#39;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Deriving generic class instances for datatypes</title>
              <link>https://www.isa-afp.org/entries/Generic_Deriving.html</link>
       <guid>https://www.isa-afp.org/entries/Generic_Deriving.html</guid>
       <dc:creator> Jonas Rädle, Lars Hupel       </dc:creator>
       <pubDate>06 Nov 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;We provide a framework for automatically deriving instances for
generic type classes. Our approach is inspired by Haskell&#39;s
&lt;i&gt;generic-deriving&lt;/i&gt; package and Scala&#39;s
&lt;i&gt;shapeless&lt;/i&gt; library.  In addition to generating the
code for type class functions, we also attempt to automatically prove
type class laws for these instances. As of now, however, some manual
proofs are still required for recursive datatypes.&lt;/p&gt;
&lt;p&gt;Note: There are already articles in the AFP that provide
automatic instantiation for a number of classes. Concretely, &lt;a href=&#34;https://www.isa-afp.org/entries/Deriving.html&#34;&gt;Deriving&lt;/a&gt; allows the automatic instantiation of comparators, linear orders, equality, and hashing. &lt;a href=&#34;https://www.isa-afp.org/entries/Show.html&#34;&gt;Show&lt;/a&gt; instantiates a Haskell-style &lt;i&gt;show&lt;/i&gt; class.&lt;/p&gt;&lt;p&gt;Our approach works for arbitrary classes (with some Isabelle/HOL overhead for each class), but a smaller set of datatypes.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Formalisation and Evaluation of Alan Gewirth's Proof for the Principle of Generic Consistency in Isabelle/HOL</title>
              <link>https://www.isa-afp.org/entries/GewirthPGCProof.html</link>
       <guid>https://www.isa-afp.org/entries/GewirthPGCProof.html</guid>
       <dc:creator> David Fuenmayor, Christoph Benzmüller       </dc:creator>
       <pubDate>30 Oct 2018 00:00:00 +0000</pubDate>
       <description>
An ambitious ethical theory ---Alan Gewirth&#39;s &#34;Principle of
Generic Consistency&#34;--- is encoded and analysed in Isabelle/HOL.
Gewirth&#39;s theory has stirred much attention in philosophy and
ethics and has been proposed as a potential means to bound the impact
of artificial general intelligence.</description>
    </item>
    <item>
       <title>Epistemic Logic</title>
              <link>https://www.isa-afp.org/entries/Epistemic_Logic.html</link>
       <guid>https://www.isa-afp.org/entries/Epistemic_Logic.html</guid>
       <dc:creator> Andreas Halkjær From       </dc:creator>
       <pubDate>29 Oct 2018 00:00:00 +0000</pubDate>
       <description>
This work is a formalization of epistemic logic with countably many
agents. It includes proofs of soundness and completeness for the axiom
system K. The completeness proof is based on the textbook
&#34;Reasoning About Knowledge&#34; by Fagin, Halpern, Moses and
Vardi (MIT Press 1995).</description>
    </item>
    <item>
       <title>Smooth Manifolds</title>
              <link>https://www.isa-afp.org/entries/Smooth_Manifolds.html</link>
       <guid>https://www.isa-afp.org/entries/Smooth_Manifolds.html</guid>
       <dc:creator> Fabian Immler, Bohua Zhan       </dc:creator>
       <pubDate>22 Oct 2018 00:00:00 +0000</pubDate>
       <description>
We formalize the definition and basic properties of smooth manifolds
in Isabelle/HOL. Concepts covered include partition of unity, tangent
and cotangent spaces, and the fundamental theorem of path integrals.
We also examine some concrete manifolds such as spheres and projective
spaces. The formalization makes extensive use of the analysis and
linear algebra libraries in Isabelle/HOL, in particular its
“types-to-sets” mechanism.</description>
    </item>
    <item>
       <title>Randomised Binary Search Trees</title>
              <link>https://www.isa-afp.org/entries/Randomised_BSTs.html</link>
       <guid>https://www.isa-afp.org/entries/Randomised_BSTs.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>19 Oct 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This work is a formalisation of the Randomised Binary Search
Trees introduced by Martínez and Roura, including definitions and
correctness proofs.&lt;/p&gt; &lt;p&gt;Like randomised treaps, they
are a probabilistic data structure that behaves exactly as if elements
were inserted into a non-balancing BST in random order. However,
unlike treaps, they only use discrete probability distributions, but
their use of randomness is more complicated.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Formalization of the Embedding Path Order for Lambda-Free Higher-Order Terms</title>
              <link>https://www.isa-afp.org/entries/Lambda_Free_EPO.html</link>
       <guid>https://www.isa-afp.org/entries/Lambda_Free_EPO.html</guid>
       <dc:creator> Alexander Bentkamp       </dc:creator>
       <pubDate>19 Oct 2018 00:00:00 +0000</pubDate>
       <description>
This Isabelle/HOL formalization defines the Embedding Path Order (EPO)
for higher-order terms without lambda-abstraction and proves many
useful properties about it. In contrast to the lambda-free recursive
path orders, it does not fully coincide with RPO on first-order terms,
but it is compatible with arbitrary higher-order contexts.</description>
    </item>
    <item>
       <title>Upper Bounding Diameters of State Spaces of Factored Transition Systems</title>
              <link>https://www.isa-afp.org/entries/Factored_Transition_System_Bounding.html</link>
       <guid>https://www.isa-afp.org/entries/Factored_Transition_System_Bounding.html</guid>
       <dc:creator> Friedrich Kurz, Mohammad Abdulaziz       </dc:creator>
       <pubDate>12 Oct 2018 00:00:00 +0000</pubDate>
       <description>
A completeness threshold is required to guarantee the completeness of
planning as satisfiability, and bounded model checking of safety
properties. One valid completeness threshold is the diameter of the
underlying transition system. The diameter is the maximum element in
the set of lengths of all shortest paths between pairs of states. The
diameter is not calculated exactly in our setting, where the
transition system is succinctly described using a (propositionally)
factored representation. Rather, an upper bound on the diameter is
calculated compositionally, by bounding the diameters of small
abstract subsystems, and then composing those.  We port a HOL4
formalisation of a compositional algorithm for computing a relatively
tight upper bound on the system diameter. This compositional algorithm
exploits acyclicity in the state space to achieve compositionality,
and it was introduced by Abdulaziz et. al. The formalisation that we
port is described as a part of another paper by Abdulaziz et. al. As a
part of this porting we developed a libray about transition systems,
which shall be of use in future related mechanisation efforts.</description>
    </item>
    <item>
       <title>The Transcendence of π</title>
              <link>https://www.isa-afp.org/entries/Pi_Transcendental.html</link>
       <guid>https://www.isa-afp.org/entries/Pi_Transcendental.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>28 Sep 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This entry shows the transcendence of &amp;pi; based on the
classic proof using the fundamental theorem of symmetric polynomials
first given by von Lindemann in 1882, but the formalisation mostly
follows the version by Niven. The proof reuses much of the machinery
developed in the AFP entry on the transcendence of
&lt;em&gt;e&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Symmetric Polynomials</title>
              <link>https://www.isa-afp.org/entries/Symmetric_Polynomials.html</link>
       <guid>https://www.isa-afp.org/entries/Symmetric_Polynomials.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>25 Sep 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;A symmetric polynomial is a polynomial in variables
&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;,&amp;hellip;,&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;n&lt;/sub&gt;
that does not discriminate between its variables, i.&amp;thinsp;e. it
is invariant under any permutation of them. These polynomials are
important in the study of the relationship between the coefficients of
a univariate polynomial and its roots in its algebraic
closure.&lt;/p&gt; &lt;p&gt;This article provides a definition of
symmetric polynomials and the elementary symmetric polynomials
e&lt;sub&gt;1&lt;/sub&gt;,&amp;hellip;,e&lt;sub&gt;n&lt;/sub&gt; and
proofs of their basic properties, including three notable
ones:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; Vieta&#39;s formula, which
gives an explicit expression for the &lt;em&gt;k&lt;/em&gt;-th
coefficient of a univariate monic polynomial in terms of its roots
&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;,&amp;hellip;,&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;n&lt;/sub&gt;,
namely
&lt;em&gt;c&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; = (-1)&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;-&lt;em&gt;k&lt;/em&gt;&lt;/sup&gt;&amp;thinsp;e&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;-&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt;(&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;,&amp;hellip;,&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;n&lt;/sub&gt;).&lt;/li&gt;
&lt;li&gt;Second, the Fundamental Theorem of Symmetric Polynomials,
which states that any symmetric polynomial is itself a uniquely
determined polynomial combination of the elementary symmetric
polynomials.&lt;/li&gt; &lt;li&gt;Third, as a corollary of the
previous two, that given a polynomial over some ring
&lt;em&gt;R&lt;/em&gt;, any symmetric polynomial combination of its
roots is also in &lt;em&gt;R&lt;/em&gt; even when the roots are not.
&lt;/ul&gt; &lt;p&gt; Both the symmetry property itself and the
witness for the Fundamental Theorem are executable. &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
